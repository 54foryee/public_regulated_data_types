# The electronic speed controller (ESC) service is designed for controlling and monitoring electric drives.
#
# ESCs (drives) are segregated into groups. Each ESC in a group has an index that is unique within the group.
# Drives in a group are commanded synchronously by publishing a message containing an array of setpoints.
# There are several subjects defined:
#
#   - Setpoint array subject. Every participant subscribes to the same setpoint subject.
#     Every message is consumed by all participants according to their index in the group.
#     The setpoint subject defines the group. There may be an arbitrary number of such groups in the network.
#
#   - Individual subjects, whose subject-ID is offset from the setpoint subject-ID `S` as a function of
#     group member index `i` as specified below.
#
#                                                   SUBJECT             TYPE                            SUBJECT-ID
#  +----------------+
#  |   Controller   |-------+------------+------... setpoint            ...actuator.util.sp.*           S
#  +----------------+       |            |
#   ^ ^ ^ ^  ^ ^ ^ ^        v            v
#   | | | |  | | | |   +---------+  +---------+
#   | | | |  | | | |   |Drive i=0|  |Drive i=1| ...
#   | | | |  | | | |   +---------+  +---------+
#   | | | |  | | | |     | | | |      | | | |
#   | | | |  | | | +-----+ | | |      | | | |       feedback            ...actuator.util.Feedback       S+i*5+1
#   | | | |  | | +---------+ | |      | | | |       status              Status                          S+i*5+2
#   | | | |  | +-------------+ |      | | | |       electric power      ...physics.electricity.Power    S+i*5+3
#   | | | |  +-----------------+      | | | |       angular kinetics    ...physics.kinetics.Angular1D   S+i*5+4
#   | | | |                           | | | |
#   | | | +---------------------------+ | | |
#   | | +-------------------------------+ | |
#   | +-----------------------------------+ |
#   +---------------------------------------+
#
# Therefore, in order to configure a group member, one has to set up two parameters: the setpoint subject-ID and
# the group member index.
#
# Vendor/application-specific subjects are not shown here; their subject-IDs are implementation-defined.
#
#
#   SETPOINT SUBJECT
#
# Upon reception of a setpoint message, a group participant fetches its setpoint from the array using the array
# element whose index equals the index of the group participant. By virtue of the Implicit Zero Extension Rule,
# if the message is too short, the setpoint will be interpreted as zero.
#
# The drive shall stop automatically if no valid setpoint was received in SETPOINT_EXPIRATION_TIMEOUT or a lower
# implementation-specific value.
# The minimum setpoint publication period should be at least twice lower than the expiration timeout.
#
# While stopped, the drive may either allow the load to freewheel or it may force it to a particular parking position,
# depending on the implementation requirements. The actual state of the load may be continuously reported using the
# angular kinetics subject.
#
# The setpoint message types that can be used to command a group of drives are defined in
# reg.drone.service.actuator.util.sp; please read the documentation related to that namespace for further information.
# Additional setpoint message types may also be supported on an implementation-specific basis.
# If the group is controlled using different setpoint subjects concurrently, the behavior is implementation-defined.
#
# The following control modes are defined. The control mode in use is specified using the register API as defined later.
# This service does not support switching the control mode or setting the motion profile at runtime;
# for that, please refer to the servo service.
#
#   0. Ratiometric voltage control. Each setpoint scalar is a value normalized/saturated in [-1, +1] representing
#      the Q-axis/phase/armature (depending on the type of the drive) voltage as a fraction of the maximum.
#      This control mode emulates the behavior of a typical RCPWM-controlled BLDC drive.
#
#   1. Ratiometric current/torque control. Each setpoint scalar is a value normalized/saturated in [-1, +1] representing
#      the Q-axis/phase/armature (depending on the type of the drive) current as a fraction of the maximum.
#      A negative setpoint during forward rotation (positive during reverse rotation) commands braking.
#
#   2. Speed control. Each setpoint scalar contains the target angular velocity of the load in radian/second.
#
#   -. More control modes may be added later. Which control modes are supported is implementation-defined.
#
# Considerations that apply to all control modes:
#
#  -  Negative setpoint values represent reversal; a positive setpoint is co-directed with positive rotation/torque.
#  -  If reverse operation is not supported, negative values should be clamped to zero.
#  -  A non-finite setpoint is to be treated as zero.
#  -  Absolute setpoint values smaller than the epsilon of the setpoint type
#     (see https://en.wikipedia.org/wiki/Machine_epsilon) are to be treated as zero setpoint.
#  -  Having received a non-zero setpoint, the drive shall operate at the minimum possible speed/power/torque
#     (depending on the control mode) to indicate that it is armed and functional.
#
#
#   PUBLISHED SUBJECTS
#
# The following subjects shall be published immediately after a new setpoint is applied:
#
#   SUBJECT             RECOMMENDED PRIORITY
#   ---------------------------------------------
#   feedback            same as the setpoint
#   electric power      second to the setpoint
#   angular kinetics    second to the setpoint
#
# If no setpoint is being published, these subjects should continue being updated at least at 1/MAX_PUBLICATION_PERIOD.
#
# If the setpoint publication rate exceeds 100 Hz, implementations are allowed (but not required) to throttle these
# subjects by dropping some of the messages such that the publication rate of each subject does not exceed 100 Hz.
# Implementations operating over Classic CAN are recommended to do this.
#
# The other subjects may be published at an implementation-defined rate and priority,
# which should be consistent across the group.
#
# The feedback data contains a flag that indicates if the publishing drive is armed. An armed drive is a drive
# that is ready to deliver full rated power at the nominal performance characteristics. For example, the flight
# management unit of an aircraft would check if all relevant drives are in the armed state before executing a
# take off. For example, a sensorless motor drive may need to spool up the rotor before being able to operate normally.
#
# Implementations are encouraged to provide additional subjects for enhanced feedback and monitoring.
#
# The measurements carried by the published messages should be low-pass filtered with an adequate cutoff frequency to
# avoid aliasing effects.
#
# Implementations should strive to sample all parameters simultaneously.
#
# If a float-typed reported quantity is unknown, the corresponding value should be NaN.
#
#
#   CONVENTIONS AND ASSUMPTIONS
#
# A drive powers a rotary mechanical load that may be connected via a gearbox. It is the responsibility of
# the drive to account for the gear ratio of the gearbox when calculating related parameters such as angular
# velocity or torque.
#
# It is assumed that there is a well-defined direction of rotation that is referred to as forward rotation.
# A positive angular velocity represents forward rotation. Likewise, forward torque is positive.
#
# It is assumed that the drive is powered from a DC electric power supply network. A positive electric current
# represents current flowing from the network into the drive, also referred to as the state of driving/motoring.
# The opposite -- braking/regeneration -- is represented by negative current.
#
# Excepting edge cases and transients, torque and current are generally of the same sign.
# The above is summarized on the following four-quadrant diagram:
#
#                                   +velocity
#                                       ^
#                               braking,| forward,
#                               negative| positive
#                               power   | power
#                            -----------+---------->  +torque/current
#                               reverse,| braking,
#                               positive| negative
#                               power   | power
#
#

float32 SETPOINT_EXPIRATION_TIMEOUT = reg.drone.service.actuator.util.Feedback.0.1.SETPOINT_EXPIRATION_TIMEOUT
# Disarm the drive if no setpoint messages have been received in this amount of time.
# Implementations are allowed to reduce this value, but never increase it.

uint8 MAX_PUBLICATION_PERIOD = 1  # [second]
# This is the maximum publication period (minimum frequency) for all subjects described in this service.
# Subjects that are clocked by the setpoint should continue being published at least at this rate when setpoint is not
# being updated.
# The publication periods should be consistent across the group.

@extent 0  # This type is not intended for runtime use.
