#
# This service is used to both write and read a register.
#
# The write operation is performed first. The server may attempt to convert the type of the value to the proper type
# if there is a type mismatch (e.g. uint8 may be converted to uint16); however, this is not guaranteed.
#
# On the next step the register will be read regardless of the outcome of the write operation. As such, if the write
# operation could not be performed (e.g. due to a type mismatch or any other issue), the register will retain its old
# value. By evaluating the response the caller can determine whether the register was written successfully.
#
# The write-read sequence is not guaranteed to be atomic, meaning that external influences may cause the register to
# change its value between the write and the subsequent read operation. The caller is responsible for handling that
# properly.
#
# The timestamp provided in the response corresponds to the time when the register was read.
#
# If only read is desired, but not write, the caller must provide a value of type Empty. That will signal the server
# that the write operation must be skipped, and it will proceed to read the register immediately.
#
# If the requested register does not exist, the write operation will have no effect and the returned value will be
# empty. Existing registers should not return Empty when read since that would make them indistinguishable from
# nonexistent registers.
#
# Registers must never change their type or flags as long as the node is running. Meaning that:
#   - Mutability, persistence, and other flags cannot change their states.
#   - Read operations must always return values of the same type and same dimensionality.
#     The dimensionality requirement does not apply to inherently variable-length types such as string and
#     unstructured chunk.
#
# Register name may contain:
#   - All ASCII alphanumeric characters (a-z, A-Z, 0-9)
#   - Dot (.)
#   - Underscore (_)
#   - Minus (-)
#
# The following optional special case names are also defined:
#   - suffix '<' is used to define an immutable persistent value that contains the maximum value
#     of the respective register.
#   - suffix '>' is like above, used to define the minimum value of the respective register.
#   - suffix '=' is like above, used to define the default value of the respective register.
#   - prefix '*' is reserved for raw memory access (to be defined later).
# Examples:
#   - register name "system.parameter"
#   - maximum value is contained in the register named "system.parameter<" (optional)
#   - minimum value is contained in the register named "system.parameter>" (optional)
#   - default value is contained in the register named "system.parameter=" (optional)
#

# The name of the accessed register. Must not be empty.
# Use the Discover service to obtain the list of registers on the node.
Name.0 name

# Value to be written. Empty if no write is required.
void4
Value.0 value

---

# The moment of time when the register was read (not written).
# Zero if the server does not support timestamping.
# This time is synchronized with the rest of the network.
uavcan.time.Point.1 timestamp

# Mutable means that the register can be written by the caller.
# Immutable registers cannot be written, but that doesn't imply that their values are constant (unchanging).
bool mutable

# Persistence means that the register retains its value permanently regardless of power cycles or
# any other changes in the state of the node, until it is explicitly overwritten (either via UAVCAN,
# any other interface, or by the device itself).
# Consider the following examples:
#
#   - Configuration parameters are usually both mutable and persistent.
#
#   - Diagnostic values are usually immutable and non-persisient.
#
#   - Registers that trigger an activity when written are typically mutable but non-persisient.
#
#   - Registers that contain factory-programmed values such as calibration coefficients that can't
#     be changed are typically immutable but persistent.
bool persistent

void10

# The value of the register when it was read (beware of race conditions).
# Registers never change their type and dimensionality while the node is running.
# Empty value means that the register does not exist (in this case the flags should be cleared/ignored).
# By comparing the returned value against the write request the caller can determine whether the register
# was written successfully, unless write was not requested.
Value.0 value
