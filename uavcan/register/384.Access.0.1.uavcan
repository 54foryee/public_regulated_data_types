#
# This service is used to write and read a register. Write is optional, it is performed if the value provided in
# the request is not empty.
#
# The write operation is performed first, unless skipped by sending an empty value in the request.
# The server may attempt to convert the type of the value to the proper type if there is a type mismatch
# (e.g. uint8 may be converted to uint16); however, servers are not required to perform implicit type conversion,
# and the rules of such conversion are not explicitly specified, so this behavior should not be relied upon.
#
# On the next step the register will be read regardless of the outcome of the write operation. As such, if the write
# operation could not be performed (e.g. due to a type mismatch or any other issue), the register will retain its old
# value. By evaluating the response the caller can determine whether the register was written successfully.
#
# The write-read sequence is not guaranteed to be atomic, meaning that external influences may cause the register to
# change its value between the write and the subsequent read operation. The caller is responsible for handling that
# case properly.
#
# The timestamp provided in the response corresponds to the time when the register was read. The timestamp may
# be empty if the server does not support timestamping or its clock is not yet synchronized with the bus.
#
# If only read is desired, but not write, the caller must provide a value of type Empty. That will signal the server
# that the write operation must be skipped, and it will proceed to read the register immediately.
#
# If the requested register does not exist, the write operation will have no effect and the returned value will be
# empty. Existing registers should not return Empty when read since that would make them indistinguishable from
# nonexistent registers.
#
# Registers must never change their type or flags as long as the server is running. Meaning that:
#   - Mutability and persistence flags cannot change their states.
#   - Read operations must always return values of the same type and same dimensionality.
#     The dimensionality requirement does not apply to inherently variable-length values such as strings and
#     unstructured chunks.
#
# In order to discover the type of a register, the caller needs to invoke this service with the write request set
# to Empty. The response will contain the current value of the register with the type information (which doesn't
# change).
#
# Register name may contain:
#   - All ASCII alphanumeric characters (a-z, A-Z, 0-9)
#   - Dot (.)
#   - Underscore (_)
#   - Minus (-)
# All other printable non-whitespace ASCII characters are reserved for standard functions;
# they may appear in register names to support such standard functions defined by the register protocol,
# but they cannot be freely used by applications outside of such standard functions.
#
# The following optional special function register names are defined:
#   - suffix '<' is used to define an immutable persistent value that contains the maximum value
#     of the respective register.
#   - suffix '>' is like above, used to define the minimum value of the respective register.
#   - suffix '=' is like above, used to define the default value of the respective register.
#   - prefix '*' is reserved for raw memory access (to be defined later).
# Examples:
#   - register name "system.parameter"
#   - maximum value is contained in the register named "system.parameter<" (optional)
#   - minimum value is contained in the register named "system.parameter>" (optional)
#   - default value is contained in the register named "system.parameter=" (optional)
#
# The following table specifies the register name patterns that are reserved by the specification for
# common functions. Implementers should always follow these conventions whenever applicable.
# The table uses the following abbreviations for register flags:
#   - M - mutable, I - immutable
#   - P - persistent, V - volatile
#
#   Name pattern        | Flags | Type      | Purpose
# ----------------------+-------+-----------+--------------------------------------------------------------------------
#   uavcan.node_id      | MP    | uint16    | Contains the node ID of the local node. Values above the maximum valid
#                       |       |           | node ID for the current transport indicate that the node ID is not set;
#                       |       |           | if plug-and-play is supported, it will be used by the node to obtain an
#                       |       |           | automatic node ID. Invalid values other than 65535 should be avoided for
#                       |       |           | consistency. The factory-default value should be 65535.
# ----------------------+-------+-----------+--------------------------------------------------------------------------
#
#

# The name of the accessed register. Must not be empty.
# Use the List service to obtain the list of registers on the node.
Name.0.1 name

@assert _offset_ % 8 == {0}

# Value to be written. Empty if no write is required.
void4
Value.0.1 value

@assert _offset_.min % 8 == 0
@assert _offset_.max % 8 == 0

---

# The moment of time when the register was read (not written).
# Zero if the server does not support timestamping.
uavcan.time.SynchronizedTimestamp.1.0 timestamp

# Mutable means that the register can be written using this service.
# Immutable registers cannot be written, but that doesn't imply that their values are constant (unchanging).
bool mutable

# Persistence means that the register retains its value permanently across power cycles or any other changes
# in the state of the server, until it is explicitly overwritten (either via UAVCAN, any other interface,
# or by the device itself).
#
# The server is recommended to manage persistence automatically by committing changed register values to a
# non-volatile storage automatically as necessary. If automatic persistence management is not implemented, it
# can be controlled manually via the standard service uavcan.node.ExecuteCommand. The same service can be used
# to return the configuration to a factory-default state. Please refer to its definition for more information.
#
# Consider the following examples:
#   - Configuration parameters are usually both mutable and persistent.
#   - Diagnostic values are usually immutable and non-persisient.
#   - Registers that trigger an activity when written are typically mutable but non-persisient.
#   - Registers that contain factory-programmed values such as calibration coefficients that can't
#     be changed are typically immutable but persistent.
bool persistent

void2

# The value of the register when it was read (beware of race conditions).
# Registers never change their type and dimensionality while the node is running.
# Empty value means that the register does not exist (in this case the flags should be cleared/ignored).
# By comparing the returned value against the write request the caller can determine whether the register
# was written successfully, unless write was not requested.
Value.0.1 value

@assert _offset_.min % 8 == 0
@assert _offset_.max % 8 == 0
