#
# This service is used to obtain information about a port (either subject or service).
# It can be used for advanced network inspections, e.g., for building computational graph maps.
#
# If this service is implemented, it shall report information for all subject ports (both publishers and subscribers)
# and service server ports. Support for service client ports is optional (implementation-defined);
# if not supported, client ports may be reported as non-existent.
#
# The reason client ports are treated differently is due to their inherent volatility: services are often
# invoked ad-hoc, and the network stack on the client node may choose to reclaim the resources allocated for
# a client port that is no longer in use for other needs.
#

# The port of interest; can be either a service or a subject.
ID.1.0 port_id

@assert _offset_ == {16}

---

# For subject ports, "input" means subscriber and "output" means publisher.
# A subject port may be both subscriber and publisher at the same time.
#
# For service ports, "input" means server and "output" means client (based on the direction of request transfers).
# A service port may be both server and client at the same time.
#
# For non-existent ports both flags should be cleared.
#
#   Kind        | Input         | Output
# --------------+---------------+----------------
#   Subject     | Subscriber    | Publisher
#   Service     | Server        | Client
#
bool is_input       # Subscriber or server
bool is_output      # Publisher or client
void6

# If such port exists, this field shall contain the full name of its data type.
# If the requested port does not exist, this field shall be empty.
# If this field is empty, the caller should ignore all other fields.
void2
uint8[<=50] data_type_full_name

# The version numbers of the data type used at this port.
# Zeros if the port does not exist.
uavcan.node.Version.1.0 data_type_version

@assert _offset_ % 8 == {0}
