# The electronic speed controller (ESC) service is designed for controlling and monitoring electric drives.
#
# ESCs (drives) are segregated into groups. Each ESC in a group has an index that is unique within the group.
# Drives in a group are commanded synchronously by publishing a message containing an array of setpoints.
# A group has exactly three subjects defined that are the same for every participant:
#
#   - Setpoint subject. Every participant subscribes to it. Every message is consumed by all participants.
#   - Feedback subject. Every participant publishes the high-rate feedback over it.
#   - Status subject.   Every participant publishes its low-rate status information over it.
#
# These three subjects define the group. There may be an arbitrary number of such groups in the network.
#
#
#     +------------+   (setpoint subject)
#     | Controller |------------+------------+------------+-------...
#     +------------+            |            |            |
#        ^      ^               v            v            v
#        |      |          +---------+  +---------+  +---------+
#        |      |          | Drive A |  | Drive B |  | Drive C |  ...
#        |      |(feedback +---------+  +---------+  +---------+
#        |      | subject)    |   |        |   |        |   |
#        |      +-------------+---)--------+---)--------+---)-----...
#        | (status subject)       |            |            |
#        +------------------------+------------+------------+-----...
#
#
#   SETPOINT SUBJECT
#
# Upon reception of a setpoint message, a group participant fetches its setpoint from the array using the array
# element whose index equals the index of the group participant. If the array is too short, the message is ignored,
# as if no setpoint was received.
#
# The setpoint message types that can be used to command a group of drives are defined in this namespace.
# Additional setpoint message types may also be supported on an implementation-specific basis
# (for example, the primitive-typed arrays defined in uavcan.primitive.array may be used).
# If a group is controlled using different setpoint subjects concurrently, the behavior is implementation-defined.
#
# Drive should stop automatically if no valid setpoint was received in DEFAULT_SETPOINT_EXPIRATION_TIMEOUT seconds;
# this limit may be configurable. The minimum setpoint publication period should be at least twice lower than
# the safety timeout.
#
# Additional standard setpoint types may be added later to support different control modes.
#
#
#   FEEDBACK SUBJECT
#
# The high-rate feedback type is optimized for frequent publication. It contains only those data entries that are
# expected to be useful for the control system that manages the drives. The publication of feedback messages
# is clocked by the setpoint messages: when a group participant receives a setpoint message with a correct number
# of setpoint elements (i.e., its index is not out of range), it applies the new setpoint and then immediately emits
# a new feedback message afterwards. Feedback messages are not published if there are no setpoints being emitted.
#
# The feedback data contains a flag that indicates if the publishing drive is engaged. An engaged drive is a drive
# that is ready to deliver full rated power at the nominal performance characteristics. For example, the flight
# management unit of an aircraft would check if all relevant drives are in the engaged state before executing a
# take off. This is not to be confused with the state of being armed, which is not representative of the ability
# to deliver mechanical power under the specified time constraints; for example, a sensorless motor drive may need
# to spool up the rotor before being able to operate normally.
#
# In a group of N participants, a single setpoint message triggers the publication of N feedback messages.
#
# The measurements carried by the feedback messages should be low-pass filtered with an adequate cutoff frequency to
# avoid aliasing effects.
#
# Implementations should strive to sample all parameters simultaneously.
#
# If a float-typed reported quantity is unknown (e.g., torque), the corresponding value should be NaN.
#
#
#   STATUS SUBJECT
#
# Status messages are published at a fixed rate that should be consistent across the group.
# For completeness, a status message embeds a feedback message constructed at the time of status message publication.
#
# In a group of N participants that are controlled by C setpoint messages per second and report their status S times
# per second the resulting total number of messages per second is: C + N*C + N*S
#
# Simultaneous sampling, low-pass filtering, and unknown value treatment apply here as well.
#
#
#   CONVENTIONS AND ASSUMPTIONS
#
# A drive powers a rotary mechanical load that may be connected via a gearbox. It is the responsibility of
# the drive to account for the gear ratio of the gearbox when calculating related parameters such as angular
# velocity or torque.
#
# It is assumed that there is a well-defined direction of rotation that is referred to as forward rotation.
# A positive angular velocity represents forward rotation. Likewise, forward torque is positive.
#
# It is assumed that the drive is powered from a DC electric power supply network. A positive electric current
# represents current flowing from the network into the drive, also referred to as the state of driving/motoring.
# The opposite -- braking/regeneration -- is represented by negative current.
#
# Excepting edge cases and transients, torque and current are generally of the same sign.
# The above is summarized on the following four-quadrant diagram:
#
#                                   +velocity
#                                       ^
#                               braking,| forward,
#                               negative| positive
#                               power   | power
#                            -----------+---------->  +torque/current
#                               reverse,| braking,
#                               positive| negative
#                               power   | power
#
#
#   STANDARD REGISTER NAMES
#
# Currently, there are none. If introduced, such names will likely follow the wildcard "drone.actuator.esc.*".

uint8 GROUP_CAPACITY = 32
# The maximum number of unique indices in a group.
# More than one participant may use the same index if lockstep control is desired.

float32 DEFAULT_SETPOINT_EXPIRATION_TIMEOUT = 0.2  # [seconds]
# If no setpoint was received in this amount of time, the drive should be stopped automatically.
# Implementations are allowed to override this setting, which should be documented explicitly.

@extent 0  # This type is not intended for runtime use.
